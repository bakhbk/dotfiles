#!/bin/bash

# –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è OrbStack –¥–ª—è macOS
# OrbStack - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ Docker Desktop —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π docker compose

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "OrbStack –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ macOS"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
if ! command -v brew &> /dev/null; then
    log_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # –î–æ–±–∞–≤–ª—è–µ–º Homebrew –≤ PATH –¥–ª—è Apple Silicon
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—â–µ–Ω –ª–∏ OrbStack
is_orbstack_running() {
    pgrep -f "OrbStack" > /dev/null 2>&1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ OrbStack
stop_orbstack() {
    if is_orbstack_running; then
        log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrbStack..."
        osascript -e 'quit app "OrbStack"' 2>/dev/null || true
        sleep 3
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ –ø–æ–º–æ–≥–ª–æ
        if is_orbstack_running; then
            log_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrbStack..."
            pkill -f "OrbStack" 2>/dev/null || true
            sleep 2
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ OrbStack
start_orbstack() {
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º OrbStack..."
    open -a OrbStack
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    local max_attempts=30
    local attempt=0
    
    while ! command -v docker &> /dev/null && [ $attempt -lt $max_attempts ]; do
        sleep 2
        ((attempt++))
        echo -n "."
    done
    echo
    
    if command -v docker &> /dev/null; then
        log_success "OrbStack —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
    else
        log_warning "OrbStack –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ..."
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ OrbStack
if brew list --cask orbstack &> /dev/null; then
    log_info "OrbStack —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrbStack –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    stop_orbstack
    
    # –û–±–Ω–æ–≤–ª—è–µ–º OrbStack
    if brew upgrade --cask orbstack; then
        log_success "OrbStack —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        log_warning "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
    fi
else
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrbStack..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OrbStack
    if brew install --cask orbstack; then
        log_success "OrbStack —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ OrbStack"
        exit 1
    fi
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º OrbStack
start_orbstack

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É docker compose
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Docker..."

# –ñ–¥–µ–º, –ø–æ–∫–∞ docker —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
max_wait=60
wait_time=0
while ! docker info &> /dev/null && [ $wait_time -lt $max_wait ]; do
    sleep 2
    wait_time=$((wait_time + 2))
    echo -n "."
done
echo

if ! docker info &> /dev/null; then
    log_error "Docker –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ ${max_wait} —Å–µ–∫—É–Ω–¥"
    log_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å OrbStack –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏..."
echo
docker --version
echo

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É docker compose (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
if docker compose version &> /dev/null; then
    log_success "‚úÖ –ö–æ–º–∞–Ω–¥–∞ 'docker compose' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    docker compose version
else
    log_warning "‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ 'docker compose' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞—Ä–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ docker-compose (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if command -v docker-compose &> /dev/null; then
    log_info "üìù –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ 'docker-compose' (—Å—Ç–∞—Ä—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)"
    docker-compose --version
else
    log_info "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'docker compose' (–±–µ–∑ –¥–µ—Ñ–∏—Å–∞) - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"
fi

echo

# –¢–µ—Å—Ç–∏—Ä—É–µ–º Docker
log_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º Docker..."
if docker run --rm hello-world &> /dev/null; then
    log_success "‚úÖ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Docker"
    exit 1
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º docker compose
log_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º docker compose..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π docker-compose.yml –¥–ª—è —Ç–µ—Å—Ç–∞
temp_dir=$(mktemp -d)
cat > "$temp_dir/docker-compose.yml" << 'EOF'
version: '3.8'
services:
  test:
    image: alpine:latest
    command: echo "Docker Compose works!"
EOF

cd "$temp_dir"
if docker compose up --quiet-pull 2>/dev/null; then
    log_success "‚úÖ Docker Compose —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Docker Compose"
fi

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
cd - > /dev/null
rm -rf "$temp_dir"

echo
log_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ OrbStack –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo
log_info "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   ‚Ä¢ docker --version"
echo "   ‚Ä¢ docker compose version"
echo "   ‚Ä¢ docker run hello-world"
echo "   ‚Ä¢ docker compose up -d"
echo
log_info "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'docker compose' (—Å –ø—Ä–æ–±–µ–ª–æ–º) –≤–º–µ—Å—Ç–æ 'docker-compose' (—Å –¥–µ—Ñ–∏—Å–æ–º)"
log_info "üîß OrbStack GUI –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Applications –∏–ª–∏ —á–µ—Ä–µ–∑ Spotlight"
